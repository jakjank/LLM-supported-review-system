name: Read PR Body
run-name: reading PR

on:
  pull_request:
    types: [opened, edited, synchronize]
  workflow_dispatch:

jobs:
  review-system:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
     - name: checkout
       uses: actions/checkout@v4
  # [ przygotowanie llamy ]
     - name: install ollama
       run: curl -fsSL https://ollama.com/install.sh | sh 
     - name: download llama3
       run: ollama pull llama3
     - name: start llama3
       run: ollama serve
       continue-on-error: true
 # [ przygotowanie pdm - tego pewnie kiedy nie bedzie - chcemy miec w przyszlosci Dockera i skompilowana paczke pythonowa ]
     - name: install pdm
       run: curl -sSL https://pdm-project.org/install-pdm.py | python3 -
     - name: prepare pdm
       working-directory: project
       run: pdm install
 # [ przygotowanie srodowiska do pracy ]
     - name: prepare folder for file
       working-directory: project
       run: mkdir SRS_files
     - name: fetch
       run: git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
     - name: create changed_files file
       run: touch changed_files.txt
     - name: identify changed code files
       working-directory: project/SRS_files
       #scheamt dodawania dla kolejnych zmian rozwiniec: "...\.cos$" -> "...\.cos$\|\.nowy$"
       run: git diff --name-only origin/main HEAD | grep "\.py$\|\.cpp$\|\.cs$" > changed_files.txt || true
     - name: create diff file
       working-directory: project/SRS_files
       run: touch diff.txt
     - name: put data in diff file
       run: |
         for file in $(cat project/SRS_files/changed_files.txt); do
           echo "# File: $file" >> project/SRS_files/diff.txt
           git diff origin/main HEAD -- $file >> project/SRS_files/diff.txt
         done
     - name: create context file
       working-directory: project/SRS_files
       run: touch context.txt
     - name: put data in context file
       run: |
         for file in $(cat project/SRS_files/changed_files.txt); do
           echo "# File: $file" >> project/SRS_files/context.txt
           if [ -f "$file" ]; then
             cat "$file" >> project/SRS_files/context.txt
           else
             echo "File '$file' was probably deleted or moved." >> project/SRS_files/context.txt
           fi
         done
     - name: create comment file
       working-directory: project/SRS_files
       run: touch comment.json
 # [ zadawanie promptow llamie ]
     - name: prepare package
       working-directory: project
       run: pdm build
     - name: install package
       working-directory: project
       run: pip install dist/project-0.1.0-py3-none-any.whl
     - name: set python path
       working-directory: project
       run: export PYTHONPATH=$PWD/src
     - name: check structure
       run: tree project
     - name: run prompt-1
       working-directory: project
       run: python -m src.project
 # [ dodanie komentarza ]
     - name: read json comment file
       working-directory: project/SRS_files
       id: read-json
       run: |
         COMMENT_DATA=$(cat comment.json)
         echo "COMMENT_DATA=$COMMENT_DATA" >> $GITHUB_ENV
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     - name: Set ENV variables
       run: |
         echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
         echo "OWNER=$GITHUB_REPOSITORY_OWNER" >> $GITHUB_ENV
         echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
     - name: create comment on diff
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         OWNER: ${{ env.OWNER }}
         REPO: ${{ env.REPO_NAME }}
         PULL_NUMBER: ${{ github.event.number }}
       run: |
         # Uzyj GitHub API do stworzenia komentarza, iterując się po obiektach z jsona
         echo "$COMMENT_DATA" | jq -c '.changes[]' | while read -r comment; do
          FILE_PATH=$(echo "$comment" | jq -r .FILE_PATH)
          LINE_POSITION=$(echo "$comment" | jq -r .LINE_POSITION)
          COMMENT_BODY=$(echo "$comment" | jq -r .COMMENT_BODY)
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$OWNER/$REPO/pulls/$PULL_NUMBER/comments \
            -d @- <<EOF
          {
            "body": "$COMMENT_BODY",
            "commit_id": "$HEAD_SHA",
            "path": "$FILE_PATH",
            "position": $LINE_POSITION
          }
          EOF
          )
          echo "API Response: $RESPONSE"
         done
 # [ posprzatanie srodowiska po pracy ]
     - name: clean up
       working-directory: project
       run: rm -r SRS_files
